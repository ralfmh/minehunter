#include "direction.bgt"
#include "square.bgt"

/*
** Represents the minefield.
*/
final class Minefield
{
  private sound@[] explosionSound;  // Explosion sound.
  
  private Square[][] grid(10);  // Grid of minefield squares.
  
  private sound@[] revealedStepSound; // Step sounds for revealed squares.
  
  private sound revealSound;  // Reveal sound.
  
  private sound@[] unknownStepSound; // Step sounds for unknown squares.
  
  private int x;  // Current x position on the minefield.
  
  private int y;  // Current y position on the minefield.
  
  /*
  ** Initializes a new instance of the Minefield class.
  */
  Minefield()
  {
    for (int i = 0; i < 10; i++)
    {
      this.grid[i].resize(10);
    }
    int x, y;
    for (int i = 0; i < 30; i++)
    {
      do
      {
        x = random(0, 9);
        y = random(0, 9);
      } while ((x == y && (x == 0 || x == 9))
        || (x == 0 && y == 9) || (x == 9 && y == 0)
        || this.grid[x][y] == Mine);
      this.grid[x][y] = Mine;
    }
    this.x = 0;
    this.y = 0;
    string soundFile = "sound/reveal.ogg";
    Assert(this.revealSound.load(soundFile),
      "Unable to load '" + soundFile + "'");
    for (int i = 1; i < 5; i++)
    {
      sound revealed;
      sound unknown;
      soundFile = "sound/revealed" + i + ".ogg";
      Assert(revealed.load(soundFile), "Unable to load '" + soundFile + "'");
      this.revealedStepSound.insert_last(revealed);
      soundFile = "sound/unknown" + i + ".ogg";
      Assert(unknown.load(soundFile), "Unable to load '" + soundFile + "'");
      this.unknownStepSound.insert_last(unknown);
    }
    for (int i = 1; i < 4; i++)
    {
      sound explosion;
      soundFile = "sound/explosion" + i + ".ogg";
      Assert(explosion.load(soundFile), "Unable to load '" + soundFile + "'");
      this.explosionSound.insert_last(explosion);
    }
    this.SpeakSquare();
  }
  
  /*
  ** Gets the number of mines on the 8 surrounding squares.
  */
  string GetSurroundingMines()
  {
    int mines = 0;
    for (int scanX = this.x - 1; scanX < (this.x + 2); scanX++)
    {
      if (scanX < 0 || scanX > (this.grid.length - 1))
      {
        continue;
      }
      for (int scanY = this.y - 1; scanY < (this.y + 2); scanY++)
      {
        if (scanY < 0 || scanY > (this.grid[0].length - 1))
        {
          continue;
        }
        if (this.grid[scanX][scanY] == Mine)
        {
          mines++;
        }
      }
    }
    if (mines == 0)
    {
      return "Keine Minen";
    }
    return mines + " Minen";
  }
  
  /*
  ** Moves to another position on the minefield.
  */
  void Move(
    Direction direction // The direction in which to move.
  )
  {
    int oldX = this.x;
    int oldY = this.y;
    switch (direction)
    {
      case Down:
        this.y++;
        break;
      case Left:
        this.x--;
        break;
      case Right:
        this.x++;
        break;
      case Up:
        this.y--;
        break;
    }
    if (this.x < 0 || this.x > (this.grid.length - 1) || this.y < 0
      || this.y > (this.grid[0].length - 1))
    {
      this.x = oldX;
      this.y = oldY;
    }
    else
    {
      this.SpeakSquare();
    }
  }
  
  /*
  ** Pans a sound based on the current position on the minefield.
  */
  private void PanSound(
    sound@ soundToPan // The sound to pan.
  )
  {
    if (this.x < 5)
    {
      soundToPan.pan = -50 + (this.x * 10);
    }
    else
    {
      soundToPan.pan = 0 + ((this.x - 4) * 10);
    }
  }
  
  /*
  ** Plays a random step sound.
  */
  private void PlayStepSound(
    sound@[] stepSound  // Array of step sounds.
  )
  {
    int index = random(0, stepSound.length - 1);
    stepSound[index].stop();
    PanSound(stepSound[index]);
    stepSound[index].play();
  }
  
  /*
  ** Reveals the current square. Returns true if the current square was empty,
  ** false if it contained a mine.
  */
  bool Reveal()
  {
    int soundIndex;
    bool isEmpty = true;
    this.PanSound(this.revealSound);
    this.revealSound.play_wait();
    switch (this.grid[this.x][this.y])
    {
      case Empty:
        this.grid[this.x][this.y] = Revealed;
        Speak(this.GetSurroundingMines());
        break;
      case Mine:
        soundIndex = random(0, this.explosionSound.length - 1);
        this.PanSound(this.explosionSound[soundIndex]);
        this.explosionSound[soundIndex].play_wait();
        Prompt("boom!");
        isEmpty = false;
        break;
    }
    return isEmpty;
  }
  
  /*
  ** Speaks the current square.
  */
  private void SpeakSquare()
  {
    string message;
    message = ascii_to_character(65 + this.x) + (this.y + 1);
    if (this.grid[this.x][this.y] == Revealed)
    {
      message += ": " + this.GetSurroundingMines();
      this.PlayStepSound(this.revealedStepSound);
    }
    else
    {
      this.PlayStepSound(this.unknownStepSound);
    }
    Speak(message);
  }
}